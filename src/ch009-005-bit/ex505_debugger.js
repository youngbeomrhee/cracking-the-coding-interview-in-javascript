/**
 * 디버거: 다음 코드가 하는 일을 설명하라.
 * (n & (n - 1)) === 0
 */
function codeDebugger(
    code = '(n & (n - 1)) === 0',
    logging = 'console.table(`# n = ${n}: \n${n.toString(2)}(2) -> ${n}(10)\n ${(n - 1).toString(2)}(2) -> ${n - 1}(10)\n`)',
    minValue = -100000,
    maxValue = 100000
) {
    for (let n = minValue; n < maxValue; n++) {
        if (eval(code)) {
            eval(logging)
        }
    }
}

codeDebugger()

/*
# n = 0: 
0(2) -> 0(10)
 -1(2) -> -1(10)

# n = 1: 
1(2) -> 1(10)
 0(2) -> 0(10)

# n = 2: 
10(2) -> 2(10)
 1(2) -> 1(10)

# n = 4: 
100(2) -> 4(10)
 11(2) -> 3(10)

# n = 8: 
1000(2) -> 8(10)
 111(2) -> 7(10)

# n = 16: 
10000(2) -> 16(10)
 1111(2) -> 15(10)

# n = 32: 
100000(2) -> 32(10)
 11111(2) -> 31(10)

# n = 64: 
1000000(2) -> 64(10)
 111111(2) -> 63(10)

# n = 128: 
10000000(2) -> 128(10)
 1111111(2) -> 127(10)

# n = 256: 
100000000(2) -> 256(10)
 11111111(2) -> 255(10)

# n = 512: 
1000000000(2) -> 512(10)
 111111111(2) -> 511(10)

# n = 1024: 
10000000000(2) -> 1024(10)
 1111111111(2) -> 1023(10)

# n = 2048: 
100000000000(2) -> 2048(10)
 11111111111(2) -> 2047(10)

# n = 4096: 
1000000000000(2) -> 4096(10)
 111111111111(2) -> 4095(10)

# n = 8192: 
10000000000000(2) -> 8192(10)
 1111111111111(2) -> 8191(10)

# n = 16384: 
100000000000000(2) -> 16384(10)
 11111111111111(2) -> 16383(10)

# n = 32768: 
1000000000000000(2) -> 32768(10)
 111111111111111(2) -> 32767(10)

# n = 65536: 
10000000000000000(2) -> 65536(10)
 1111111111111111(2) -> 65535(10)
*/
